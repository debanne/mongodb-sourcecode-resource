#!/bin/bash

set -ueo pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination=$1

payload=$(cat <&0)

version=$(jq --raw-output '.version.version // empty' <<< "${payload}")
if [[ -z ${version} ]]; then
    echo >&2 "Version info 'version' is missing"
    exit 1
fi

system=$(jq -r '.source.system // empty' <<< "${payload}")
if [[ -z ${system} ]]; then
    echo >&2 "Source parameter 'system' is missing"
    exit 1
fi
architecture=$(jq -r '.source.architecture // empty' <<< "${payload}")
if [[ -z ${architecture} ]]; then
    echo >&2 "Source parameter 'architecture' is missing"
    exit 1
fi
distribution=$(jq -r '.source.distribution // empty' <<< "${payload}")
if [[ -z ${system} ]]; then
    echo >&2 "Source parameter 'distribution' is missing"
    exit 1
fi

filename="mongodb-${system}-${architecture}-${distribution}-${version}.tgz"
>&2 echo "Fetching $filename"

pushd "${destination}" > /dev/null
echo "${version}"       > version

tarball_url=$(
    (
        curl -s https://www.mongodb.com/download-center/community/releases   | tr '<' '\n' \
            | sed -ne "s|^.*href=\"\([^\"]*$filename\)\">.*|\1|p"
    ) | tail -n1
)
if [[ -z ${tarball_url} ]]; then
    echo >&2 "No such '$filename' tarball available"
    exit 1
fi

echo >&2 "Downloading ${tarball_url}"
curl  --silent --fail --show-error --location --remote-name \
    --url "${tarball_url}"
curl  --silent --fail --show-error --location --output "sha256" \
    --url "${tarball_url}.sha256"
ls -l
sha256=$(< sha256)
sha256sum --check <<< "${sha256}"

jq --null-input \
    --arg "version" "${version}" \
    '{ version: { version: $version } }' \
    >&3
